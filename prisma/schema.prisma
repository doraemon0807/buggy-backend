// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  firstName     String
  lastName      String
  username      String        @unique
  email         String        @unique
  password      String
  bio           String?
  avatar        String?
  followers     User[]        @relation("Follows")
  following     User[]        @relation("Follows")
  photos        Photo[]
  likes         Like[]
  comments      Comment[]
  rooms         ChatRoom[]
  chatMessages  ChatMessage[]
  unreadMessage ChatMessage[] @relation("MessageReaders")
  saved         Saved[]
  tagged        Photo[]       @relation("Tagged")
}

model Photo {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  file      String
  caption   String
  hashtags  Hashtag[]
  likes     Like[]
  comments  Comment[]
  saved     Saved[]
  tagged    User[]    @relation("Tagged")
}

model Hashtag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  hashtag   String    @unique
  photos    Photo[]
  comments  Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int

  // user cannot like a picture multiple times
  @@unique([photoId, userId])
}

model Saved {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int

  // user cannot like a picture multiple times
  @@unique([photoId, userId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payload   String
  photo     Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int
  hashtag   Hashtag[]
  hashtagId Int?
}

model ChatRoom {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  chatMessages ChatMessage[]
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  payload    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  read       Boolean  @default(false)
  unreaders  User[]   @relation("MessageReaders")
}
